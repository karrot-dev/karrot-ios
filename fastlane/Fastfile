default_platform :ios

platform :ios do

  before_all do
    setup_circle_ci
  end

  private_lane :update_version do |options|
    infoPlist = options[:infoPlist]
    bv = load_json(json_path: "build_version.json")
    puts "Set Version to #{bv["version"]}"
    # Update version from file
    set_info_plist_value(
      path: infoPlist,
      key: "CFBundleShortVersionString",
      value: bv["version"]
    )
    puts "Set Build version to #{bv["build"]}"
    # Update build version from file
    set_info_plist_value(
      path: infoPlist,
      key: "CFBundleVersion",
      value: bv["build"]
    )
  end

  frontend_dir = '../karrot-frontend/'
  cordova_dir = "#{frontend_dir}/cordova"

  lane :prepare do |options|
    prod = options[:prod] ? options[:prod] : 'dev'

    Dir.chdir(frontend_dir) do
      sh("yarn")
      sh("yarn build:cordova:#{prod}")
      sh("mv dist dist-app-#{prod}")
    end

    Dir.chdir(cordova_dir) do
      sh("rm -f www")
      sh("ln -s ../dist-app-#{prod} www")
      sh("rm -f config/current")
      sh("ln -s #{prod} config/current")
      sh("cordova platform add ios")
    end
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  lane :beta do
    team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)

    match(
      username: ENV['IOS_APPLE_ID'],
      git_url: ENV['MATCH_GIT_REPO'],
      type: "appstore",
      readonly: true
    )

    Dir.chdir(cordova_dir) do
      puts Dir.pwd
      sh('cordova', 'build', 'ios',
         '--packageType=app-store',
         '--codeSignIdentity="iPhone Developer"',
         "--developmentTeam=#{team_id}",
         '--automaticProvisioning=true',
        )
    end

    project_dir = "#{cordova_dir}/platforms/ios"
    project_name = 'Karrot Dev'
    # # Overwrite project's version and build number
    # update_version(
    #   infoPlist: "#{project_dir}/#{project_name}/#{project_name}-Info.plist"
    # )

    gym(
      workspace: "#{project_dir}/#{project_name}.xcworkspace"
    )

    upload_to_testflight(
      username: ENV['IOS_APPLE_ID'],
      skip_waiting_for_build_processing: true
    )
  end

  desc "Deploy a new version to the App Store"
  lane :release do
    match(
      username: ENV['IOS_APPLE_ID'],
      git_url: ENV['MATCH_GIT_REPO'],
      type: "appstore",
      readonly: true
    )
    cordova(platform: 'ios')
    upload_to_app_store(
      ipa: ENV['CORDOVA_IOS_RELEASE_BUILD_PATH'],
      skip_waiting_for_build_processing: true
    )
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end

# Local Variables:
# mode: ruby
# End:
